{
    "exportFormatVersion": 1.3,
    "exportTime": "2015-10-16 19:22:13",
    "containerVersion": {
        "accountId": "28896164",
        "containerId": "1638837",
        "containerVersionId": "0",
        "deleted": false,
        "container": {
            "accountId": "28896164",
            "containerId": "1638837",
            "name": "YouTube Tracking",
            "publicId": "GTM-MGHN6W",
            "timeZoneCountryId": "US",
            "timeZoneId": "America/Los_Angeles",
            "notes": "",
            "usageContext": ["WEB"],
            "fingerprint": "1445023325858",
            "enabledBuiltInVariable": ["DEBUG_MODE"]
        },
        "tag": [{
            "accountId": "28896164",
            "containerId": "1638837",
            "tagId": "1",
            "name": "CU - YouTube Tracking - LunaMetrics Plugin",
            "type": "html",
            "liveOnly": false,
            "parameter": [{
                "type": "BOOLEAN",
                "key": "supportDocumentWrite",
                "value": "false"
            }, {
                "type": "TEMPLATE",
                "key": "html",
                "value": "<script type=\"text/javascript\" id=\"gtm-youtube-tracking\">\n;(function( document, window, config ) {\r\n\r\n  'use strict';\r\n\r\n  window.onYouTubeIframeAPIReady = (function() {\r\n    \r\n    var cached = window.onYouTubeIframeAPIReady;\r\n\r\n    return function() {\r\n        \r\n      if( cached ) {\r\n\r\n        cached.apply(this, arguments);\r\n\r\n      }\r\n\r\n      // This script won't work on IE 6 or 7, so we bail at this point if we detect that UA\r\n      if( !navigator.userAgent.match( /MSIE [67]\\./gi ) ) {\r\n\r\n        init(); \r\n    \r\n      }\r\n\r\n    };\r\n\r\n  })();\r\n  \r\n  var _config = config || {};\r\n  var forceSyntax = _config.forceSyntax || 0;\r\n  var dataLayerName = _config.dataLayerName || 'dataLayer';\r\n  // Default configuration for events\r\n  var eventsFired = {\r\n    'Play'        : true,\r\n    'Pause'       : true,\r\n    'Watch to End': true\r\n  };\r\n  \r\n  // Overwrites defaults with customizations, if any\r\n  var key;\r\n  for( key in _config.events ) {\r\n\r\n    if( _config.events.hasOwnProperty( key ) ) {\r\n\r\n      eventsFired[ key ] = _config.events[ key ];\r\n\r\n    }\r\n\r\n  }\r\n  \r\n  //*****//\r\n  // DO NOT EDIT ANYTHING BELOW THIS LINE EXCEPT CONFIG AT THE BOTTOM\r\n  //*****//\r\n\r\n  // Invoked by the YouTube API when it's ready\r\n  function init() {\r\n\r\n    var iframes = document.getElementsByTagName( 'iframe' );\r\n    var embeds  = document.getElementsByTagName( 'embed' );\r\n\r\n    digestPotentialVideos( iframes );\r\n    digestPotentialVideos( embeds );\r\n\r\n  }\r\n\r\n  var tag            = document.createElement( 'script' );\r\n  tag.src            = '//www.youtube.com/iframe_api';\r\n  var firstScriptTag = document.getElementsByTagName( 'script' )[0];\r\n  firstScriptTag.parentNode.insertBefore( tag, firstScriptTag );\r\n\r\n  // Take our videos and turn them into trackable videos with events\r\n  function digestPotentialVideos( potentialVideos ) {\r\n\r\n    var i;\r\n\r\n    for( i = 0; i < potentialVideos.length; i++ ) {\r\n\r\n      var isYouTubeVideo = checkIfYouTubeVideo( potentialVideos[ i ] );\r\n\r\n      if( isYouTubeVideo ) {\r\n\r\n        var normalizedYouTubeIframe = normalizeYouTubeIframe( potentialVideos[ i ] );\r\n        addYouTubeEvents( normalizedYouTubeIframe );\r\n\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // Determine if the element is a YouTube video or not\r\n  function checkIfYouTubeVideo( potentialYouTubeVideo ) {\r\n    \r\n    var potentialYouTubeVideoSrc = potentialYouTubeVideo.src || '';\r\n\r\n    if( potentialYouTubeVideoSrc.indexOf( 'youtube.com/embed/' ) > -1 || \r\n        potentialYouTubeVideoSrc.indexOf( 'youtube.com/v/' ) > -1 ) {\r\n\r\n      return true;\r\n\r\n    }\r\n\r\n    return false;\r\n\r\n  }\r\n\r\n  // Turn embed objects into iframe objects and ensure they have the right parameters\r\n  function normalizeYouTubeIframe( youTubeVideo ) {\r\n    \r\n    var a           = document.createElement( 'a' );\r\n        a.href      = youTubeVideo.src;\r\n        a.hostname  = 'www.youtube.com';\r\n        a.protocol  = document.location.protocol;\r\n    var tmpPathname = a.pathname.charAt( 0 ) === '/' ? a.pathname : '/' + a.pathname;  // IE10 shim\r\n    \r\n    // For security reasons, YouTube wants an origin parameter set that matches our hostname\r\n    var origin = window.location.protocol + '%2F%2F' + window.location.hostname + ( window.location.port ? ':' + window.location.port : '' );\r\n\r\n    if( a.search.indexOf( 'enablejsapi' ) === -1 ) {\r\n\r\n      a.search = ( a.search.length > 0 ? a.search + '&' : '' ) + 'enablejsapi=1';\r\n\r\n    }\r\n\r\n    // Don't set if testing locally\r\n    if( a.search.indexOf( 'origin' ) === -1  && window.location.hostname.indexOf( 'localhost' ) === -1 ) {\r\n\r\n      a.search = a.search + '&origin=' + origin;\r\n\r\n    }\r\n\r\n    if( youTubeVideo.type === 'application/x-shockwave-flash' ) {\r\n\r\n      var newIframe     = document.createElement( 'iframe' );\r\n      newIframe.height  = youTubeVideo.height;\r\n      newIframe.width   = youTubeVideo.width;\r\n      tmpPathname = tmpPathname.replace('/v/', '/embed/');\r\n\r\n      youTubeVideo.parentNode.parentNode.replaceChild( newIframe, youTubeVideo.parentNode );\r\n\r\n      youTubeVideo = newIframe;\r\n\r\n    }\r\n\r\n    a.pathname       = tmpPathname;\r\n    if(youTubeVideo.src !== a.href + a.hash) {\r\n    \r\n      youTubeVideo.src = a.href + a.hash;\r\n\r\n    }\r\n\r\n    return youTubeVideo;\r\n\r\n  }\r\n\r\n  // Add event handlers for events emitted by the YouTube API\r\n  function addYouTubeEvents( youTubeIframe ) {\r\n\r\n    youTubeIframe.pauseFlag  = false;\r\n\r\n    new YT.Player( youTubeIframe, {\r\n\r\n      events: {\r\n\r\n        onStateChange: function( evt ) {\r\n\r\n          onStateChangeHandler( evt, youTubeIframe );\r\n\r\n        }\r\n\r\n      }\r\n\r\n    } );\r\n\r\n  }\r\n\r\n  // Returns key/value pairs of percentages: number of seconds to achieve\r\n  function getMarks(duration) {\r\n\r\n    var marks = {}; \r\n\r\n    // For full support, we're handling Watch to End with percentage viewed\r\n    if (_config.events[ 'Watch to End' ] ) {\r\n\r\n      marks[ 'Watch to End' ] = duration * 99 / 100;\r\n\r\n    }\r\n\r\n    if( _config.percentageTracking ) {\r\n\r\n      var points = [];\r\n      var i;\r\n\r\n      if( _config.percentageTracking.each ) {\r\n\r\n        points = points.concat( _config.percentageTracking.each );\r\n\r\n      }\r\n\r\n      if( _config.percentageTracking.every ) {\r\n\r\n        var every = parseInt( _config.percentageTracking.every, 10 );\r\n        var num = 100 / every;\r\n        \r\n        for( i = 1; i < num; i++ ) {\r\n      \r\n          points.push(i * every);\r\n\r\n        }\r\n\r\n      }\r\n\r\n      for(i = 0; i < points.length; i++) {\r\n\r\n        var _point = points[i];\r\n        var _mark = _point + '%';\r\n        var _time = duration * _point / 100;\r\n        \r\n        marks[_mark] = Math.floor( _time );\r\n\r\n      }\r\n\r\n    }\r\n\r\n    return marks;\r\n\r\n  }\r\n\r\n  function checkCompletion(player, marks, videoId) {\r\n\r\n    var duration     = player.getDuration();\r\n    var currentTime  = player.getCurrentTime();\r\n    var playbackRate = player.getPlaybackRate();\r\n    player[videoId] = player[videoId] || {};\r\n    var key;\r\n\r\n    for( key in marks ) {\r\n\r\n      if( marks[key] <= currentTime && !player[videoId][key] ) {\r\n\r\n        player[videoId][key] = true;\r\n        fireAnalyticsEvent( videoId, player.getVideoData().title, key );\r\n\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // Event handler for events emitted from the YouTube API\r\n  function onStateChangeHandler( evt, youTubeIframe ) {\r\n \r\n    var stateIndex     = evt.data;\r\n    var player         = evt.target;\r\n    var targetVideoUrl = player.getVideoUrl();\r\n    var targetVideoId  = targetVideoUrl.match( /[?&]v=([^&#]*)/ )[ 1 ];  // Extract the ID    \r\n    var playerState    = player.getPlayerState();\r\n    var duration       = player.getDuration();\r\n    var marks          = getMarks(duration);\r\n    var playerStatesIndex = {\r\n      '1' : 'Play',\r\n      '2' : 'Pause'\r\n    };\r\n    var state = playerStatesIndex[ stateIndex ]; \r\n\r\n    youTubeIframe.playTracker = youTubeIframe.playTracker || {};\r\n\r\n    if( playerState === 1 && !youTubeIframe.timer ) {\r\n\r\n      clearInterval(youTubeIframe.timer);\r\n\r\n      youTubeIframe.timer = setInterval(function() {\r\n\r\n        // Check every second to see if we've hit any of our percentage viewed marks\r\n        checkCompletion(player, marks, youTubeIframe.videoId);\r\n\r\n      }, 1000);\r\n\r\n    } else {\r\n\r\n      clearInterval(youTubeIframe.timer);\r\n      youTubeIframe.timer = false;\r\n\r\n    }\r\n\r\n    // Playlist edge-case handler\r\n    if( stateIndex === 1 ) {\r\n\r\n      youTubeIframe.playTracker[ targetVideoId ] = true;\r\n      youTubeIframe.videoId = targetVideoId;\r\n      youTubeIframe.pauseFlag = false;\r\n\r\n    }\r\n\r\n    if( !youTubeIframe.playTracker[ youTubeIframe.videoId ] ) {\r\n\r\n      // This video hasn't started yet, so this is spam\r\n      return false;\r\n\r\n    }\r\n\r\n    if( stateIndex === 2 ) {\r\n\r\n      if( !youTubeIframe.pauseFlag ) { \r\n      \r\n        youTubeIframe.pauseFlag = true;\r\n\r\n      } else {\r\n\r\n        // We don't want to fire consecutive pause events\r\n        return false;\r\n\r\n      }\r\n\r\n    }\r\n\r\n    // If we're meant to track this event, fire it\r\n    if( eventsFired[ state ] ) {\r\n    \r\n      fireAnalyticsEvent( youTubeIframe.videoId, player.getVideoData().title, state );\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // Fire an event to Google Analytics or Google Tag Manager\r\n  function fireAnalyticsEvent( videoId, videoTitle, state ) {\r\n\r\n    var videoUrl = 'https://www.youtube.com/watch?v=' + videoId;\r\n    var _ga = window.GoogleAnalyticsObject;\r\n\r\n    if( typeof window[ dataLayerName ] !== 'undefined' && !_config.forceSyntax ) { \r\n      \r\n      window[ dataLayerName ].push( {\r\n\r\n        'event'     : 'youTubeTrack',\r\n        'attributes': {\r\n\r\n          'videoUrl': videoUrl,\r\n          'videoAction': state,\r\n          'videoTitle': videoTitle\r\n\r\n        }\r\n\r\n      } );\r\n\r\n    } else if( typeof window[ _ga ] === 'function' && \r\n               typeof window[ _ga ].getAll === 'function' && \r\n               _config.forceSyntax !== 2 ) \r\n    {\r\n\r\n      window[ _ga ]( 'send', 'event', 'Videos', state, videoUrl, videoTitle );\r\n\r\n    } else if( typeof window._gaq !== 'undefined' && forceSyntax !== 1 ) {\r\n\r\n      window._gaq.push( [ '_trackEvent', 'Videos', state, videoUrl, videoTitle ] );\r\n\r\n    }\r\n\r\n  }\r\n    \r\n} )( document, window, {\r\n  'events': {\r\n    'Play': true,\r\n    'Pause': true,\r\n    'Watch to End': true\r\n  },\r\n  'percentageTracking': {\r\n    'every': 25,\r\n    'each': [ 10, 90 ]\r\n  }\r\n} );\r\n/*\r\n * Configuration Details\r\n *\r\n * @property events object\r\n * Defines which events emitted by YouTube API\r\n * will be turned into Google Analytics or GTM events\r\n *\r\n * @property percentageTracking object\r\n * Object with configurations for percentage viewed events\r\n *\r\n *   @property each array\r\n *   Fires an event once each percentage ahs been reached\r\n *\r\n *   @property every number\r\n *   Fires an event for every n% viewed\r\n *\r\n * @property forceSyntax int 0, 1, or 2\r\n * Forces script to use Classic (2) or Universal(1)\r\n *\r\n * @property dataLayerName string\r\n * Tells script to use custom dataLayer name instead of default\r\n */\r\n/*\r\n * v8.0.4\r\n * Created by the Google Analytics consultants at http://www.lunametrics.com\r\n * Written by @SayfSharif and @notdanwilkerson\r\n * Modified by R2Integrated Analytics Team at http://www.r2integrated.com\r\n * Documentation: https://github.com/lunametrics/youtube-google-analytics/\r\n * Licensed under the Creative Commons 4.0 Attribution Public License\r\n */\n</script>"
            }],
            "fingerprint": "0",
            "firingTriggerId": ["2147479553"],
            "parentFolderId": "2",
            "tagFiringOption": "ONCE_PER_EVENT"
        }, {
            "accountId": "28896164",
            "containerId": "1638837",
            "tagId": "2",
            "name": "GA - Event - YouTube Tracking",
            "type": "ua",
            "liveOnly": false,
            "parameter": [{
                "type": "BOOLEAN",
                "key": "enableEcommerce",
                "value": "false"
            }, {
                "type": "BOOLEAN",
                "key": "setTrackerName",
                "value": "false"
            }, {
                "type": "LIST",
                "key": "fieldsToSet",
                "list": [{
                    "type": "MAP",
                    "map": [{
                        "type": "TEMPLATE",
                        "key": "fieldName",
                        "value": "cookieDomain"
                    }, {
                        "type": "TEMPLATE",
                        "key": "value",
                        "value": "auto"
                    }]
                }]
            }, {
                "type": "BOOLEAN",
                "key": "doubleClick",
                "value": "false"
            }, {
                "type": "TEMPLATE",
                "key": "useDebugVersion",
                "value": "{{Debug Mode}}"
            }, {
                "type": "TEMPLATE",
                "key": "trackingId",
                "value": "{{YOUR_GA_TRACKING_ID}}"
            }, {
                "type": "TEMPLATE",
                "key": "trackType",
                "value": "TRACK_EVENT"
            }, {
                "type": "BOOLEAN",
                "key": "nonInteraction",
                "value": "false"
            }, {
                "type": "BOOLEAN",
                "key": "enableLinkId",
                "value": "false"
            }, {
                "type": "TEMPLATE",
                "key": "eventLabel",
                "value": "{{Video URL}}"
            }, {
                "type": "TEMPLATE",
                "key": "eventAction",
                "value": "{{Video Action}}"
            }, {
                "type": "TEMPLATE",
                "key": "eventCategory",
                "value": "Videos"
            }],
            "fingerprint": "0",
            "firingTriggerId": ["1"],
            "parentFolderId": "2",
            "tagFiringOption": "ONCE_PER_EVENT"
        }],
        "fingerprint": "0",
        "trigger": [{
            "accountId": "28896164",
            "containerId": "1638837",
            "triggerId": "1",
            "name": "Event - YouTube Tracking",
            "type": "CUSTOM_EVENT",
            "customEventFilter": [{
                "type": "EQUALS",
                "parameter": [{
                    "type": "TEMPLATE",
                    "key": "arg0",
                    "value": "{{_event}}"
                }, {
                    "type": "TEMPLATE",
                    "key": "arg1",
                    "value": "youTubeTrack"
                }]
            }],
            "fingerprint": "1445023325858",
            "parentFolderId": "2"
        }],
        "variable": [{
            "accountId": "28896164",
            "containerId": "1638837",
            "variableId": "1",
            "name": "Video Action",
            "type": "v",
            "parameter": [{
                "type": "BOOLEAN",
                "key": "setDefaultValue",
                "value": "false"
            }, {
                "type": "TEMPLATE",
                "key": "name",
                "value": "attributes.videoAction"
            }, {
                "type": "INTEGER",
                "key": "dataLayerVersion",
                "value": "2"
            }],
            "fingerprint": "0",
            "parentFolderId": "2"
        }, {
            "accountId": "28896164",
            "containerId": "1638837",
            "variableId": "2",
            "name": "Video URL",
            "type": "v",
            "parameter": [{
                "type": "BOOLEAN",
                "key": "setDefaultValue",
                "value": "false"
            }, {
                "type": "TEMPLATE",
                "key": "name",
                "value": "attributes.videoUrl"
            }, {
                "type": "INTEGER",
                "key": "dataLayerVersion",
                "value": "2"
            }],
            "fingerprint": "0",
            "parentFolderId": "2"
        }, {
            "accountId": "28896164",
            "containerId": "1638837",
            "variableId": "2",
            "name": "Video Title",
            "type": "v",
            "parameter": [{
                "type": "BOOLEAN",
                "key": "setDefaultValue",
                "value": "false"
            }, {
                "type": "TEMPLATE",
                "key": "name",
                "value": "attributes.videoTitle"
            }, {
                "type": "INTEGER",
                "key": "dataLayerVersion",
                "value": "2"
            }],
            "fingerprint": "0",
            "parentFolderId": "2"
        }],
        "folder": [{
            "accountId": "28896164",
            "containerId": "1638837",
            "folderId": "2",
            "name": "LunaMetrics YouTube Tracking Plugin",
            "fingerprint": "1445023325286"
        }]
    }
}