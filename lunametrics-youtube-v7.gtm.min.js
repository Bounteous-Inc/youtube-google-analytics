(function(g,e,h){function n(d){for(var b=0;b<d.length;b++){var a;a=d[b].src||"";a=-1<a.indexOf("youtube.com/embed/")||-1<a.indexOf("youtube.com/v/")?!0:!1;if(a){a=d[b];var c=g.createElement("a");c.href=a.src;c.hostname="www.youtube.com";c.protocol=g.location.protocol;var f="/"===c.pathname.charAt(0)?c.pathname:"/"+c.pathname,k=e.location.protocol+"%2F%2F"+e.location.hostname;-1===c.search.indexOf("enablejsapi")&&(c.search=0<c.search.length?c.search+"&enablejsapi=1":c.search="enablejsapi=1&origin="+
k);-1===c.search.indexOf("origin")&&(c.search=c.search+"&origin="+k);"application/x-shockwave-flash"===a.type&&(k=g.createElement("iframe"),k.height=a.height,k.width=a.width,f="/embed/"+a.videoId,a.parentNode.parentNode.replaceChild(k,a.parentNode),a=k);c.pathname=f;a.src=c.href+c.hash;t(a)}}}function t(d){d.pauseFlag=!1;new YT.Player(d,{events:{onStateChange:function(b){u(b,d)}}})}function v(d){var b=100/p;d=d.getDuration()/b;var a={};for(var i=1;i<b;i++){var c=i*p+"%";a[c]=parseInt(d*i,10);l.percentageTracking&&
(f[c]=!0)}return a}function u(d,b){var a=d.data,c=d.target,e=c.getVideoUrl().match(/[?&]v=([^&#]*)/)[1],f=b.currentState,g=c.getPlayerState(),h=v(c);1!==g||b.timer?(clearInterval(b.timer),b.timer=!1):(clearInterval(b.timer),b.timer=setInterval(function(){var a=b.videoId;c.getDuration();var d=c.getCurrentTime();c.getPlaybackRate();var e;c.durationCache=c.durationCache||{};for(e in h)h[e]<=d&&!c.durationCache[e]&&(c.durationCache[e]=!0,q(a,e))},1E3));if(-1===a&&f)return b.lockVideoId=!0,!1;if(3===a&&
b.lockVideoId)return!1;b.lockVideoId||(b.videoId=e);0===a&&(b.lockVideoId=!1);q(b.videoId,{"-1":"Unstarted",0:"Watch to End",1:"Play",2:"Pause",3:"Buffering",5:"Cueing"}[a]);b.currentState=a}function q(d,b){var a="https://www.youtube.com/watch?v="+d;"undefined"===typeof e.dataLayer||m?f[b]&&("function"===typeof e.ga&&"function"===typeof e.ga.getAll&&2!==m?e.ga("send","event","Videos",b,a):"undefined"!==typeof e._gaq&&1!==m&&e._gaq.push(["_trackEvent","Videos",b,a])):e.dataLayer.push({event:"youTubeTrack",
attributes:{videoUrl:a,videoAction:b}})}e.onYouTubeIframeAPIReady=function(){var d=e.onYouTubeIframeAPIReady;return function(){d&&d.apply(this,arguments);var b=g.getElementsByTagName("iframe"),a=g.getElementsByTagName("embed");n(b);n(a)}}();var l="OPT_CONFIG_OBJ"!==h?h:{},m=l.forceSyntax||0,f=l.events||{Unstarted:!1,"Watch to End":!0,Play:!0,Pause:!0,Buffering:!1,Cueing:!1},p=parseInt(l.percentageTracking,10)||20;"undefined"===typeof f.Play&&(f.Play=!0);"undefined"===typeof f.Pause&&(f.Pause=!0);
"undefined"===typeof f["Watch to End"]&&(f["Watch to End"]=!0);h=g.createElement("script");h.src="//www.youtube.com/iframe_api";var r=g.getElementsByTagName("script")[0];r.parentNode.insertBefore(h,r)})
(document,window,"OPT_CONFIG_OBJ");
/*
 * "OPT_CONFIG_OBJ" can be replaced with an object
 * to modify default behavior, e.g.:
 *
 * {
 *   'events': {  // Don't fire the Watch To End event, but fire Unstarted events
 *     'Unstarted': true,
 *     'Watch to End': false;
 *   },
 *   forceSyntax: 1, // Force the script to use Universal Analytics
 *   percentageTracking: 20  // Every 20% increment viewed, fire an event
 * }
 *
 * @property forceSyntax int 0, 1, or 2
 * Forces script to use Classic (2) or Universal(1)
 *
 * Default: 0
 *
 * @property events object
 * Defines which events emitted by YouTube API
 * will be turned into Google Analytics or GTM events
 * 
 * Defaults:
 * 'events': {
 *   'Unstarted'   : false,
 *   'Watch to End': true,
 *   'Play'        : true,
 *   'Pause'       : true,
 *   'Buffering'   : false,
 *   'Cued'        : false
 * }
 *
 * @property percentageTracking number
 * Fires events every n% completed, where n
 * is an integer you specify
 *
 * Default: Disabled
 * 
 */
